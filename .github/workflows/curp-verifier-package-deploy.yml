name: Build and Deploy Debian Package CURP Verifier

on:
  push:
    branches: [ main ]
    paths:
      - "src/rust/curp_verifier/**"
      - "src/rust/curp_verifier/packaging/deb/amd64/**"
      - "src/rust/curp_verifier/packaging/deb/arm64/**"
      - ".github/workflows/curp-verifier-package-deploy.yml"
  workflow_dispatch:

jobs:
  build-and-deploy-amd64:
    runs-on: ubuntu-latest
    # if: contains(github.event.head_commit.message, 'amd64') || contains(join(github.event.commits.*.modified, ','), 'src/rust/curp_verifier/packaging/deb/amd64/')

    steps:
      - name: 🧾 Checkout repo
        uses: actions/checkout@v3

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Install packaging tools
        run: sudo apt update && sudo apt install -y dpkg-dev

      - name: 🛠 Build Rust library
        working-directory: src/rust/curp_verifier
        run: make all

      - name: 📦 Build .deb package
        working-directory: src/rust/curp_verifier
        run: |
          make changelog-deb ARCH=amd64
          make package-deb ARCH=amd64
          ls -lah
          mv curp-verifier_*_amd64.deb $GITHUB_WORKSPACE/

      - name: 🔏 Sign .deb package
        run: |
          echo "${{ secrets.RAFEX_GPG_PRIVATE_KEY }}" | base64 -d > private.key.asc
          gpg --batch --import private.key.asc
          debs=$(ls curp-verifier_*.deb)
          for deb in $debs; do
            gpg --output "$deb.sig" --detach-sign --armor "$deb"
          done

      - name: 🚀 Upload to server using scp
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_github_gactions ./curp-verifier_*_amd64.deb ./curp-verifier_*_amd64.deb.sig ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }}:/srv/repo/debian/dists/stable/main/binary-amd64/

      - name: 🔄 Regenerate Packages.gz using ssh
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          ssh -i id_github_gactions -o StrictHostKeyChecking=no ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }} \
            "bash -c 'cd /srv/repo/debian && \
            apt-ftparchive packages dists/stable/main/binary-amd64 > dists/stable/main/binary-amd64/Packages && \
            gzip -9c dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz'"

      - name: 🔏 Sign Release
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          ssh -i id_github_gactions -o StrictHostKeyChecking=no ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }} \
            "bash -c 'cd /srv/repo/debian && \
            apt-ftparchive -c ${{ secrets.RAFEX_RELEASE_CONF }} release dists/stable > dists/stable/Release && \
            gpg --batch --default-key ${{ secrets.RAFEX_GPG_KEY }} -abs -o dists/stable/Release.gpg dists/stable/Release && \
            gpg --batch --default-key ${{ secrets.RAFEX_GPG_KEY }} --clearsign -o dists/stable/InRelease dists/stable/Release'"

  build-and-deploy-arm64:
    runs-on: ubuntu-latest
    # if: contains(github.event.head_commit.message, 'arm64') || contains(join(github.event.commits.*.modified, ','), 'src/rust/curp_verifier/packaging/deb/arm64/')

    steps:
      - name: 🧾 Checkout repo
        uses: actions/checkout@v3

      - name: 🦀 Install Rust + ARM target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: 🧰 Install cross-compiling tools
        run: sudo apt update && sudo apt install -y dpkg-dev gcc-aarch64-linux-gnu

      - name: 🛠 Build Rust library for ARM64
        working-directory: src/rust/curv_verifier
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p target/release
          cp target/aarch64-unknown-linux-gnu/release/libcurp_verifier.* target/release/

      - name: 📥 Install cbindgen
        run: cargo install cbindgen

      - name: 🧾 Generate header
        working-directory: src/rust/curp_verifier
        run: make cbindgen

      - name: 📦 Build .deb package for ARM64
        working-directory: src/rust/curp_verifier
        run: |
          make changelog-deb ARCH=arm64
          make package-deb ARCH=arm64
          ls -lah
          mv curp-verifier_*_arm64.deb $GITHUB_WORKSPACE/

      - name: 🔏 Sign .deb package
        run: |
          echo "${{ secrets.RAFEX_GPG_PRIVATE_KEY }}" | base64 -d > private.key.asc
          gpg --batch --import private.key.asc
          debs=$(ls curp-verifier_*.deb)
          for deb in $debs; do
            gpg --output "$deb.sig" --detach-sign --armor "$deb"
          done

      - name: 🚀 Upload ARM64 package to server using scp
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_github_gactions ./curp-verifier_*_arm64.deb ./curp-verifier_*_arm64.deb.sig ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }}:/srv/repo/debian/dists/stable/main/binary-arm64/

      - name: 🔄 Regenerate Packages.gz using ssh
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          ssh -i id_github_gactions -o StrictHostKeyChecking=no ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }} \
            "bash -c 'cd /srv/repo/debian && \
            apt-ftparchive packages dists/stable/main/binary-arm64 > dists/stable/main/binary-arm64/Packages && \
            gzip -9c dists/stable/main/binary-arm64/Packages > dists/stable/main/binary-arm64/Packages.gz'"

      - name: 🔏 Sign Release
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          ssh -i id_github_gactions -o StrictHostKeyChecking=no ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }} \
            "bash -c 'cd /srv/repo/debian && \
            apt-ftparchive -c ${{ secrets.RAFEX_RELEASE_CONF }} release dists/stable > dists/stable/Release && \
            gpg --batch --default-key ${{ secrets.RAFEX_GPG_KEY }} -abs -o dists/stable/Release.gpg dists/stable/Release && \
            gpg --batch --default-key ${{ secrets.RAFEX_GPG_KEY }} --clearsign -o dists/stable/InRelease dists/stable/Release'"