name: Build and Deploy Debian Package CURP Verifier

on:
  push:
    branches: [ main ]
    paths:
      - "src/rust/curp_verifier/**"
      - ".github/workflows/curp-package-deploy.yml"
  workflow_dispatch:

jobs:
  build-and-deploy-amd64:
    runs-on: ubuntu-latest

    steps:
      - name: ðŸ§¾ Checkout repo
        uses: actions/checkout@v3

      - name: ðŸ¦€ Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: ðŸ“¦ Install packaging tools
        run: sudo apt update && sudo apt install -y dpkg-dev

      - name: ðŸ›  Build Rust library
        working-directory: src/rust/curp_verifier
        run: make all

      - name: ðŸ“¦ Build .deb package
        working-directory: src/rust/curp_verifier
        run: |
          make install DESTDIR=$(pwd)/deb_pkg
          mkdir -p deb_pkg/DEBIAN
          cp packaging/deb/amd64/control deb_pkg/DEBIAN/control
          dpkg-deb --build deb_pkg curp-verifier-amd64.deb
          ls -lah
          mv curp-verifier-amd64.deb $GITHUB_WORKSPACE/

      - name: ðŸš€ Upload to server using scp
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_github_gactions ./curp-verifier-amd64.deb ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }}:/srv/repo/debian/dists/stable/main/binary-amd64/

      - name: ðŸ”„ Regenerate Packages.gz using ssh
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          ssh -i id_github_gactions -o StrictHostKeyChecking=no ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }} \
            'cd /srv/repo/debian/dists/stable/main/binary-amd64 && dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz'

  build-and-deploy-arm64:
    runs-on: ubuntu-latest

    steps:
      - name: ðŸ§¾ Checkout repo
        uses: actions/checkout@v3

      - name: ðŸ¦€ Install Rust + ARM target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: ðŸ§° Install cross-compiling tools
        run: sudo apt update && sudo apt install -y dpkg-dev gcc-aarch64-linux-gnu

      - name: ðŸ›  Build Rust library for ARM64
        working-directory: src/rust/curp_verifier
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p target/release
          cp target/aarch64-unknown-linux-gnu/release/libcurp_verifier.* target/release/

      - name: ðŸ“¥ Install cbindgen
        run: cargo install cbindgen

      - name: ðŸ§¾ Generate header
        working-directory: src/rust/curp_verifier
        run: make cbindgen

      - name: ðŸ“¦ Build .deb package for ARM64
        working-directory: src/rust/curp_verifier
        run: |
          make install DESTDIR=$(pwd)/deb_pkg
          mkdir -p deb_pkg/DEBIAN
          cp packaging/deb/arm64/control deb_pkg/DEBIAN/control
          dpkg-deb --build deb_pkg curp-verifier-arm64.deb
          ls -lah
          mv curp-verifier-arm64.deb $GITHUB_WORKSPACE/

      - name: ðŸš€ Upload ARM64 package to server using scp
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_github_gactions ./curp-verifier-arm64.deb ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }}:/srv/repo/debian/dists/stable/main/binary-arm64/

      - name: ðŸ”„ Regenerate Packages.gz using ssh
        run: |
          echo "${{ secrets.RAFEX_SERVER_SSH_KEY }}" > id_github_gactions
          chmod 600 id_github_gactions
          ssh -i id_github_gactions -o StrictHostKeyChecking=no ${{ secrets.RAFEX_SERVER_USER }}@${{ secrets.RAFEX_SERVER_HOST }} \
            'cd /srv/repo/debian/dists/stable/main/binary-arm64 && dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz'